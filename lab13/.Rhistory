# API KEY: bf357dc9-a9ef-41a2-80ed-17d4d4abfa23
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv", na = c("", "NA", "\\")) %>% clean_names()
p <- homerange %>%
ggplot(aes(x=taxon, fill=trophic_guild))+
geom_bar(na.rm=T, position="dodge")
p + theme_linedraw()+
theme(axis.text.x = element_text(angle = 60, hjust=1))+
labs(title = "Observations by Taxon in Homerange Data",
x = NULL,
y= "n",
fill= "Trophic Guild")
q <- homerange %>%
ggplot(aes(x = log10_mass, y = log10_preymass, color = taxon))+
geom_point()
q+
theme_classic()
p+theme_linedraw()+
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 60, hjust=1))+
labs(title = "Observations by Taxon in Homerange Data",
x = NULL,
y= "n",
fill= "Trophic Guild")
#install.packages("ggthemes")
library(ggthemes)
ls("package:ggthemes")[grepl("theme_", ls("package:ggthemes"))]
p +
theme_stata()+
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 60, hjust=1))+
labs(title = "Observations by Taxon in Homerange Data",
x = NULL,
y= "n",
fill= "Trophic Guild")
q+
theme_excel_new(0)
q+
theme_excel_new()
q+
theme_test()
q <- homerange %>%
ggplot(aes(x = log10_mass, y = log10_preymass, color = taxon))+
geom_point(na.rm=T)
q+
theme_test()
q+
theme_test()+
labs(title = "log10(preymass) vs log10(mass)",
x = "log10(mass)",
y = "log10(preymass)")
q+
theme_excel_new()+
abs(title = "log10(preymass) vs log10(mass)",
x = "log10(mass)",
y = "log10(preymass)")
q+
theme_excel_new()+
labs(title = "log10(preymass) vs log10(mass)",
x = "log10(mass)",
y = "log10(preymass)")
?RColorBrewer
display.brewer.pal(5,"Accent") #qualitative palette
display.brewer.all(colorblindFriendly = TRUE)
p+scale_fill_brewer(palette = "Set2")+
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 60, hjust=1))+
labs(title = "Observations by Taxon in Homerange Data",
x = NULL,
y= "n",
fill= "Trophic Guild")
q+
theme_solarized_2()+
labs(title = "log10(preymass) vs log10(mass)",
x = "log10(mass)",
y = "log10(preymass)")
q+
theme_solarized()+
labs(title = "log10(preymass) vs log10(mass)",
x = "log10(mass)",
y = "log10(preymass)")
q+
scale_fill_brewer(palette = "Set3")
q+
scale_color_brewer(palette = "Set3")
colors <- paletteer::palettes_d_names
my_palette <- paletteer_d("ggsci::nrc_npg")
barplot(rep(1,6), axes=FALSE, col=my_palette)
p+scale_fill_manual(values=my_palette)+
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 60, hjust=1))+
labs(title = "Observations by Taxon in Homerange Data",
x = NULL,
y= "n",
fill= "Trophic Guild")
q+
pal_startrek()
q+
scale_color_startrek()
q+
scale_color_startrek()
q+
scale_color_startrek()
paletteer::palettes_d_names
View(colors)
my_other_palette <- paletteer_d(fishualize::Mycteroperca_bonaci)
my_other_palette <- paletteer_d("fishualize::Mycteroperca_bonaci")
q+
scale_fill_manual(my_other_palette)
my_other_palette <- paletteer_d("nationalparkcolors::GeneralGrant")
q+
scale_fill_manual(my_other_palette)
q+
scale_fill_manual(value = my_other_palette)
q+
scale_fill_manual(values = my_other_palette)
my_other_palette <- paletteer_d("nationalparkcolors::GeneralGrant")
barplot(rep(1,6), axes=FALSE, col=my_other_palette)
barplot(rep(1,9), axes=FALSE, col=my_other_palette)
q+scale_fill_manual(values = my_other_palette)
my_other_palette <- paletteer_d("NatParksPalettes::Arches")
barplot(rep(1,9), axes=FALSE, col=my_other_palette)
q+scale_fill_manual(values = my_other_palette)
q+scale_fill_manual(values = my_palette)
p+scale_fill_manual(values=my_other_palette)+
```
my_other_palette <- paletteer_d("NatParksPalettes::Arches")
barplot(rep(1,9), axes=FALSE, col=my_other_palette)
p+scale_fill_manual(values=my_other_palette)+
my_other_palette <- paletteer_d("NatParksPalettes::Arches")
#barplot(rep(1,9), axes=FALSE, col=my_other_palette)
p+scale_fill_manual(values=my_other_palette)+
p+scale_fill_manual(values=my_other_palette)
q+scale_fill_manual(values=my_other_palette)
q+scale_color_manual(values=my_other_palette)
homerange %>%
ggplot(aes(x=taxon, y=log10.mass, fill=trophic.guild))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust=1))
homerange %>%
ggplot(aes(x=taxon, y=log10_mass, fill=trophic_guild))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust=1))
homerange %>%
ggplot(aes(x=taxon, y=log10_mass, fill=taxon))+
geom_boxplot()+
facet_wrap(~trophic_guild, ncol=2, labeller=label_both)+
theme(axis.text.x = element_text(angle = 60, hjust=1),
legend.position = "none",
strip.text = element_text(size = 12, face = "bold"))
homerange %>%
ggplot(aes(x=taxon, y=log10_mass))+
geom_boxplot()+
facet_grid(trophic_guild~.)+
theme(axis.text.x = element_text(angle = 60, hjust=1))
homerange %>%
ggplot(aes(x=taxon, y=log10_mass))+
geom_boxplot()+
facet_grid(.~trophic.guild)+
theme(axis.text.x = element_text(angle = 60, hjust=1))
homerange %>%
ggplot(aes(x=taxon, y=log10_mass))+
geom_boxplot()+
facet_grid(.~trophic_guild)+
theme(axis.text.x = element_text(angle = 60, hjust=1))
homerange %>%
ggplot(aes(x=taxon, y=log10_mass))+
geom_boxplot()+
facet_grid(trophic_guild~thermoregulation)+
theme(axis.text.x = element_text(angle = 60, hjust=1))
homerange %>%
ggplot(aes(x=log10_mass))+
geom_histogram()+
facet_wrap(trophic_guild~.)
homerange %>%
ggplot(aes(x=log10_mass))+
geom_histogram()+
facet_wrap(thermoregulation~.)
homerange %>%
ggplot(aes(x = log10_mass))+
geom_barplot()+
facet_grid(locomotion)
homerange %>%
ggplot(aes(x = log10_mass))+
geom_histogram()+
facet_grid(locomotion~themoregulation)
homerange %>%
ggplot(aes(x = log10_mass))+
geom_histogram()+
facet_grid(.~locomotion)
library("tidyverse")
library("janitor")
library("lubridate") #this will help us manage dates
library("tidyverse")
library("janitor")
library("lubridate") #this will help us manage dates
spider_records <- read_csv("data/spider_records.csv")
glimpse(spider_records) #let's have a quick look
table_A <- read_csv("data/table_A.csv")
table_B <- read_csv("data/table_B.csv")
table_A
table_B
inner_join(table_A, table_B, by="customer_ID")
left_join(table_A, table_B, by="customer_ID")
right_join(table_A, table_B, by="customer_ID")
full_join(table_A, table_B, by="customer_ID")
anti_join(table_A, table_B, by="customer_ID")
spiders_locs <- read_csv("data/spiders_locations.csv")
inner_join(spiders_locs, spider_records, by = "Accession")
library("tidyverse")
library("janitor")
library("lubridate") #this will help us manage dates
spider_records <- read_csv("data/spider_records.csv")
glimpse(spider_records) #let's have a quick look
table_A <- read_csv("data/table_A.csv")
table_B <- read_csv("data/table_B.csv")
table_A
table_B
#join_type(firstTable, secondTable, by=columnTojoinOn)
inner_join(table_A, table_B, by="customer_ID")
left_join(table_A, table_B, by="customer_ID")
right_join(table_A, table_B, by="customer_ID")
full_join(table_A, table_B, by="customer_ID")
anti_join(table_A, table_B, by="customer_ID")
spiders_locs <- read_csv("data/spiders_locations.csv")
inner_join(spiders_locs, spider_records, by = "Accession")
library("tidyverse")
library("janitor")
library("lubridate") #this will help us manage dates
spider_records <- read_csv("data/spider_records.csv")
glimpse(spider_records) #let's have a quick look
table_A <- read_csv("data/table_A.csv")
table_B <- read_csv("data/table_B.csv")
table_A
table_B
#join_type(firstTable, secondTable, by=columnTojoinOn)
inner_join(table_A, table_B, by="customer_ID")
left_join(table_A, table_B, by="customer_ID")
right_join(table_A, table_B, by="customer_ID")
full_join(table_A, table_B, by="customer_ID")
anti_join(table_A, table_B, by="customer_ID")
spiders_locs <- read_csv("data/spiders_locations.csv")
inner_join(spiders_locs, spider_records, by = "Accession")
day <- today()
day
str(day)
datetime <- now()
datetime
full_join(spiders_locs, spider_records, by = "Accession")
View(spiders_locs)
View(spider_records)
? dmy
spiders <- full_join(spiders_locs, spider_records, by = "Accession")
spiders %>%
mutate(Date = dmy(Date))
dateformat1 %>%
ymd()
dateformat1 <- "20200922"
dateformat2 <- "09-22-2020"
dateformat3 <- "22/09/2020"
dateformat4 <- "09-22-2020 17:00:00"
dateformat5 <- "20200922 170000"
dateformat1 %>%
ymd()
dateformat2 %>%
mdy()
dateformat3 %>%
dmy()
dateformat4 %>%
mdy_hms()
dateformat5 %>%
ymd_hms()
spiders <- spiders %>%
mutate(Date = dmy(Date))
? dmy
spiders <- spiders %>%
mutate(Date = dmy(Date))
spiders %>%
mutate(Date = dmy(Date))
library("tidyverse")
library("janitor")
library("lubridate") #this will help us manage dates
spider_records <- read_csv("data/spider_records.csv")
glimpse(spider_records) #let's have a quick look
table_A <- read_csv("data/table_A.csv")
table_B <- read_csv("data/table_B.csv")
table_A
table_B
#join_type(firstTable, secondTable, by=columnTojoinOn)
inner_join(table_A, table_B, by="customer_ID")
left_join(table_A, table_B, by="customer_ID")
right_join(table_A, table_B, by="customer_ID")
full_join(table_A, table_B, by="customer_ID")
anti_join(table_A, table_B, by="customer_ID")
spiders_locs <- read_csv("data/spiders_locations.csv")
inner_join(spiders_locs, spider_records, by = "Accession")
spiders <- full_join(spiders_locs, spider_records, by = "Accession")
day <- today()
day
str(day)
datetime <- now()
datetime
? dmy
spiders %>%
mutate(Date = dmy(Date))
spiders <- spiders %>%
mutate(Date = dmy(Date))
View(spider_records)
View(spiders)
write_csv(spiders, "data/spiders.csv", row.names = FALSE)
?write_csv
write_csv(spiders, "data/spiders.csv" col_names = FALSE)
write_csv(spiders, "data/spiders.csv", col_names = FALSE)
spiders$Date <- dmy(spiders$Date)
View(spiders)
library("tidyverse")
library("janitor")
library("lubridate") #this will help us manage dates
spider_records <- read_csv("data/spider_records.csv")
glimpse(spider_records) #let's have a quick look
table_A <- read_csv("data/table_A.csv")
table_B <- read_csv("data/table_B.csv")
table_A
table_B
#join_type(firstTable, secondTable, by=columnTojoinOn)
inner_join(table_A, table_B, by="customer_ID")
left_join(table_A, table_B, by="customer_ID")
right_join(table_A, table_B, by="customer_ID")
full_join(table_A, table_B, by="customer_ID")
anti_join(table_A, table_B, by="customer_ID")
spiders_locs <- read_csv("data/spiders_locations.csv")
inner_join(spiders_locs, spider_records, by = "Accession")
spiders <- full_join(spiders_locs, spider_records, by = "Accession")
day <- today()
day
str(day)
datetime <- now()
datetime
? dmy
spiders$Date <- dmy(spiders$Date)
View(spiders)
write_csv(spiders, "data/spiders.csv", col_names = FALSE)
write.csv(spiders, "data/spiders.csv", row.names = FALSE)
library(tidyverse)
library(janitor)
#install.packages("ggmap")
library(ggmap)
library("tidyverse")
library("janitor")
library("lubridate") #this will help us manage dates
spider_records <- read_csv("data/spider_records.csv")
glimpse(spider_records) #let's have a quick look
table_A <- read_csv("data/table_A.csv")
table_B <- read_csv("data/table_B.csv")
table_A
table_B
#join_type(firstTable, secondTable, by=columnTojoinOn)
inner_join(table_A, table_B, by="customer_ID")
left_join(table_A, table_B, by="customer_ID")
right_join(table_A, table_B, by="customer_ID")
full_join(table_A, table_B, by="customer_ID")
anti_join(table_A, table_B, by="customer_ID")
spiders_locs <- read_csv("data/spiders_locations.csv")
inner_join(spiders_locs, spider_records, by = "Accession")
spiders <- full_join(spiders_locs, spider_records, by = "Accession")
day <- today()
day
str(day)
datetime <- now()
datetime
? dmy
spiders$Date <- dmy(spiders$Date)
dateformat1 <- "20200922"
dateformat2 <- "09-22-2020"
dateformat3 <- "22/09/2020"
dateformat4 <- "09-22-2020 17:00:00"
dateformat5 <- "20200922 170000"
dateformat1 %>%
ymd()
dateformat2 %>%
mdy()
dateformat3 %>%
dmy()
dateformat4 %>%
mdy_hms()
dateformat5 %>%
ymd_hms()
write.csv(spiders, "data/spiders_with_locs.csv", row.names = FALSE)
library(tidyverse)
library(janitor)
#install.packages("ggmap")
library(ggmap)
register_stadiamaps("bf357dc9-a9ef-41a2-80ed-17d4d4abfa23", write = FALSE)
spiders <- read_csv("data/spiders_with_locs.csv")%>% clean_names()
spiders <- spiders %>% filter(latitude<=42)
spiders %>%
select(latitude, longitude) %>%
summary()
lat <- c(34.67, 41.80)
long <- c(-124.1, -115.5)
bbox <- make_bbox(long, lat, f = 0.03) #f is the fraction of the bounding box to add to the range
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=7)
ggmap(map1)
ggmap(map1) +
geom_point(data = spiders, aes(longitude, latitude), size=0.4) +
labs(x= "Longitude", y= "Latitude", title="Spider Locations")
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=9)
ggmap(map1)
ggmap(map1) +
geom_point(data = spiders, aes(longitude, latitude), size=0.4) +
labs(x= "Longitude", y= "Latitude", title="Spider Locations")
library(tidyverse)
library(janitor)
#install.packages("ggmap")
library(ggmap)
register_stadiamaps("bf357dc9-a9ef-41a2-80ed-17d4d4abfa23", write = FALSE)
spiders <- read_csv("data/spiders_with_locs.csv")%>% clean_names()
spiders <- spiders %>% filter(latitude<=42)
spiders %>%
select(latitude, longitude) %>%
summary()
lat <- c(34.67, 41.80) #pull from summary
long <- c(-124.1, -115.5) #pull from summary
bbox <- make_bbox(long, lat, f = 0.03) #f is the fraction of the bounding box to add to the range
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=8)
ggmap(map1)
ggmap(map1) +
geom_point(data = spiders, aes(longitude, latitude), size=0.4) +
labs(x= "Longitude", y= "Latitude", title="Spider Locations")
library(tidyverse)
library(janitor)
#install.packages("ggmap")
library(ggmap)
register_stadiamaps("bf357dc9-a9ef-41a2-80ed-17d4d4abfa23", write = FALSE)
spiders <- read_csv("data/spiders_with_locs.csv")%>% clean_names()
spiders <- spiders %>% filter(latitude<=42)
spiders %>%
select(latitude, longitude) %>%
summary()
lat <- c(34.67, 41.80) #pull from summary
long <- c(-124.1, -115.5) #pull from summary
bbox <- make_bbox(long, lat, f = 0.03) #f is the fraction of the bounding box to add to the range
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=7)
ggmap(map1)
ggmap(map1) +
geom_point(data = spiders, aes(longitude, latitude), size=0.4) +
labs(x= "Longitude", y= "Latitude", title="Spider Locations")
sharks <- read_csv("data/SharkIncidents_1950_2022_220302.csv") %>%
clean_names() %>%
filter(longitude !="NA" & latitude !="NA") %>% # pulling out NA locations
mutate(longitude = as.numeric(longitude)) # converting longitude to numeric
sharks_dups <- sharks %>%
distinct(location, .keep_all = TRUE) # remove duplicate locations, but keep the remaining variables
View(sharks_dups)
sharks_dups %>%
select(longitute, latitude) %>%
summary()
sharks_dups %>%
select(longitude, latitude) %>%
summary()
bbox <- make_bbox(long, lat, f= 0.05)
lat <- c(32.59, 41.56)
long <- c(-124.7, -117.1)
bbox <- make_bbox(long, lat, f= 0.05)
map2 <- get_map(bbox, maptile = "stamen_terrain", zoom = 7)
map2 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom = 7)
ggmap(map2)
ggmap(map2)+
geom_point(data = sharks_dups, aes(longitude, latitude))
ggmap(map2)+
geom_point(data = sharks_dups, aes(longitude, latitude), size = 0.4)+
labs(title = "Locations of shark attacks in CA",
x = "Longitude",
y = "Latitude")
sharks_dups %>%
filter(injury = "fatal") %>%
ggmap(map2)+
geom_point(aes(longitude, latitude), size = 0.4)
sharks_dups %>%
filter(injury == "fatal") %>%
ggmap(map2)+
geom_point(aes(longitude, latitude), size = 0.4)
ggmap(map2)+
geom_point(sharks_fatal, aes(longitude, latitude), size = 0.4)
sharks_fatal <- sharks_dups %>%
filter(injury == "fatal")
ggmap(map2)+
geom_point(sharks_fatal, aes(longitude, latitude), size = 0.4)
ggmap(map2)
geom_point(sharks_fatal, aes(longitude, latitude)
sharks_fatal <- sharks_dups %>%
sharks_fatal <- sharks_dups %>%
filter(injury == "fatal")
ggmap(map2)+
geom_point(sharks_fatal, aes(longitude, latitude)
ggmap(map2)+
ggmap(map2)+
geom_point(data = sharks_fatal, aes(longitude, latitude))
ggmap(map2)+
geom_point(data = sharks_fatal, aes(longitude, latitude))+
labs(title = "Fatal Shark Attacks in California")
grizzly <- read.csv("data/bear-sightings.csv")
glimpse(grizzly)
grizzly %>%
select(longitude, latitude) %>%
summary()
bbox_bear <- make_bbox(bear_long, bear_lat)
bear_long <- c(-166.2, -131.3)
bear_lat <- c(55.02, 70.37)
bbox_bear <- make_bbox(bear_long, bear_lat)
bear_map <- get_stadiamap(bbox_bear, zoom = 5)
ggmap(bear-map)
ggmap(bear_map)
